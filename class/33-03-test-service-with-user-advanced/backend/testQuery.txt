POST http://localhost:9200/myproduct/_doc/1

{
  "name": "최신마우스",
  "description": "안녕하세요. Bestshop입니다! 국내 최고 Best 상품만 판매합니다!",
  "price": 10000
}
// 상품 등록

POST http://localhost:9200/myproduct/_doc/1

{
  "name": "최신마우스",
  "description": "안녕하세요. Bestshop입니다! 국내 최고 Best 상품만 판매합니다!",
  "price": 10000
}
// 상품 등록

GET http://localhost:9200/myproduct/_doc/1
//상품조회 1
GET http://localhost:9200/myproduct/_doc/2
//상품조회 2
GET http://localhost:9200/myproduct/_search
//상품조회 all

PUT http://localhost:9200/myproduct/_doc/2

{
  "name": "기계식키보드(청축)",
  "description": "기계식 키보드 오늘만 특가!!",
  "price": 30000
}
// 상품 수정

POST http://localhost:9200/myproduct/_search

{
  "query": {
    "match": {
      "description": "Best"
    }
  }
}
// 상품 검색 (설명에 Best가 들어간 것)
// 조회 o

POST http://localhost:9200/myproduct/_search

{
  "query": {
    "match": {
      "description": "Bestshop"
    }
  }
}
// 상품 검색 (설명에 Bestshop 들어간 것)
// 조회 x

Bestshop은 검색이 안되는 이유! : 공백을 기준으로 토크나이징하기 때문 (invert indexing)
토크나이징: 특수문자 없애고, 공백을 기준으로 자르고, 대문자는 소문자로 바꿈 (default)
Character-Filter
Tokenizer
Token-Filter
=> Analyzer

Analyzer 종류
1 standard: default
2 whitespace: Tokenizer
3 keyword: 전체를 한 단어로 봄

POST http://localhost:9200/myproduct/_analyze

{
  "tokenizer": "standard",
  "text": "안녕하세요. Bestshop입니다! Best going"
}
// default

setting: 토크나이징 기준
mapping: 분석 대상 컬럼 지정, 나중에 바꿀 수 없음

PUT http://localhost:9200/myproduct2

{
  "settings": {
    // 분석 기준
    "analysis": {
      "analyzer": {
        // analyzer 생성
        "my_ngram_analyzer": {
            // 적용할 기준
          "tokenizer": "my_ngram_tokenizer"    
        }
      },
      // 토크나이저 생성
      "tokenizer": {
        "my_ngram_tokenizer": {
            // nGram: 단어를 쪼갤 개수
          "type": "nGram",
          // 최소
          "min_gram": "1",
          // 최대
          "max_gram": "10"
        }
      }
    },
    // ngram의 최대는 10개
    "max_ngram_diff" : "10"
  }
}
// setting 수정

PUT http://localhost:9200/myproduct2/_settings

{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_ngram_analyzer": {
          "tokenizer": "my_ngram_tokenizer"    
        }
      },
      "tokenizer": {
        "my_ngram_tokenizer": {
          "type": "nGram",
          "min_gram": "1",
          "max_gram": "10"
        }
      }
    },
    "max_ngram_diff" : "20"
  }
}
// setting 변경

POST http://localhost:9200/myproduct2/_open

GET http://localhost:9200/myproduct2/_settings


POST http://localhost:9200/myproduct2/_analyze

{
  "analyzer": "my_ngram_analyzer",
  "text": "안녕하세요. Bestshop입니다! Best"
}


PUT http://localhost:9200/myproduct2/_mappings

{
  "properties": {
    "name": {
      "type": "text"
    },
    "description": {
      "type": "text",
      "analyzer": "my_ngram_analyzer"
    },
    "price": {
      "type": "long"
    }
  }
}
// nGram 애널라이저 mapping에 등록

GET http://localhost:9200/myproduct2/_mappings
// 등록된 mapping 확인


PUT http://localhost:9200/myproduct2/_mappings

{
  "properties": {
    "name": {
      "type": "text"
    },
    "description": {
      "type": "text",
      "analyzer": "my_ngram_analyzer"
    },
    "price": {
      "type": "text"
    }
  }
}
// 등록된 mapping에서 price 타입 변경
// => 불가능
// 새로운 컬럼이 추가되는 경우에는 mapping에도 추가하는 것이 가능

PUT http://localhost:9200/myproduct2/_mappings

{
  "properties": {
    "name": {
      "type": "text"
    },
    "description": {
      "type": "text",
      "analyzer": "my_ngram_analyzer"
    },
    "price": {
      "type": "long"
    },
    "qqq": {
      "type": "text"
    }
  }
}
// 새로운 컬럼 추가


POST http://localhost:9200/myproduct2/_doc/1

{
  "name": "최신마우스",
  "description": "안녕하세요. Bestshop입니다! 국내 최고 Best 상품만 판매합니다!",
  "price": 10000
}
// mapping을 확인하기 위해 상품 등록

POST http://localhost:9200/myproduct2/_search

{
  "query": {
    "match": {
      "description": "Bestshop"
    }
  }
}
// Bestshop을 검색
// ngram으로 데이터가 모두 쪼개져서 저장되었기 때문에 일부 단어로도 검색 가능


POST http://localhost:9200/myproduct2/_search

{
  "query": {
    "bool": {
      "should":[{ "prefix": { "name": "최" } }]
    }
  }
}
// 검색방법 중 prefix 이용
// '최'로 시작하는 이름
// autocomplete(자동 완성) 기능
// 1 nGram 방식 => 검색어가 포함되어있는 모든 단어가 나오는 자동완성
// 2 prefix 방식 => 검색어로 시작하는 모든 단어가 나오는 자동완성


POST http://localhost:9200/myproduct2/_search

{
  "query": {
    "match": {
      "name": "최"
    }
  }
}
// match: 정확하게 매칭되는 단어만 결괏값으로 보여줌