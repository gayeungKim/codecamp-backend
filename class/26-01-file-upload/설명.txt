Transaction ACID(트랜잭션 속성)
- A: Atomicity, 원자성. 안정성 보장을 위해 가져야 할 성질 중 하나.
    트랜잭션과 관련한 작업들이 부분적으로 실행되다가 중단되지 않는
    것을 보장하는 능력 (모두 성공할 것, 혹인 모두 실패할 것. DB 오염
    을 막기 위함)
- C: Consistencyc, 일관성. 트랜잭션이 실행을 성공적으로 완료하면
    언제나 일관성 있는 DB 상태로 유지
    + 똑같은 쿼리를 조회할 때마다 동일한 결괏값이 나타나야 함
    + 수정과 삭제로 인해 결과값이 달라지는 것은 당연
- I: Isolation, 격리성. 트랜잭션을 수행 시 다른 트랜잭션의 연산
    작업이 끼어들지 못하도록 함
    + A의 요청을 처리하는 동안 B의 요청은 대기상태로
- D: Durability, 지속성. 성공적으로 수행된 트랜잭션에 대한 로그가
    남아야 하는 성질로 런타임 오류나 시스템 오류가 발생하더라도, 해당
    기록은 영구적이어야 함
    + 성공하여 commit이 되었으면 서버를 다시 켜도 그 데이터는 그대로
    유지가 되어야 함

결제시 발생가능한 격리성(Isolation) 문제
- Isolation-level: Transaction 격리 수준. 동시에 여러 트린잭션을
    처리될 때 특정 트랜잭션이 다른 트랜잭션에서 변경하거나 조회하는
    데이터를 볼 수 있도록 허용할지 말지를 결정하는 것
    + 단계
    + READ UNCOMMITTED: 변경내용의 COMMITTE이나 ROLLBACK 여부와 관련
        없이 READ 가능. 정합성 문제 발생(DIRTY READ 발생, COMMITTE 되지 않은 명령을
        확인할 수 있기 때문에)
        + DIRTY READ: 트랜잭션 작업이 완료되기 전에 다른 트랜잭션에서
            접근이 가능한 것
    + READ COMMITTED: RDB(관계형 데이터베이스)에서 대부분 사용하는 격리 수준, (Dirty read
        발생하지 않음) 실제 테이블 값을 가져오는 것이 아니라 Undo 영역에 백업된 레코드에서
        값을 가져옴
        + NON REPEATABLE READ: 한 트랜잭션 내에서 같은 쿼리를 두 번 수행할 때, 그 사이에 다른
            값을 수정 또는 삭제해 두 쿼리가 다르게 나타나는 현상. 동일한 쿼리를 요청했을 경우
            동일한 결과값이 나타나야하는데 다르게 나타나는 현상.
        + 예를들면
            + 111 BUSAN
            + A QUERY: UADATE SET 111 JEJU
            + B QUERY...1 : SELECT 111
            + A COMMITT
            + B QUERY...2 : SELECT 111
            + ...1의 결과 = BUSAN / ...2의 결과 JEJU
    + REPEATABLE READ: RDB(관계형 데이터베이스)에서 대부분 기본적으로 사용됨. MYSQL에서는
        트랜잭션마다 트랜잭션 ID를 부여해 해당 ID보다 작은 트랜잭션 번호에서 변경된 값만
        읽음. Undo 공간에 백업해두고 실제 레코드 값을 변경함.
            + 백업된 데이터는 불필요하다고 판단하는 시점에 주기적으로 삭제
            + Undo에 백업된 레코드가 많아지면 MySQL 서버의 처리능력이 떨어짐
            + MVCC(Multi Version Concurrency Control) 방식
        + PHANTOM READ: 종종 다른 트랜잭션에서 수행한 변경 작업에 의해 레코드가 보였다 안보였다
            하는 현상.
            + PHANTOM READ는 MYSQL에서는 자동으로 제거해 주기에 추가로 적용할 부분은 없으
            + PHANTOM READ가 발생하지 않기 위해서는 SERIALIZABLE을 사용
            + 성능 측면에서는 동시 처리 능력이 가장 낮으며 가장 단순한 수준이지만 가장 엄격함
    + SERIALIZABLE: PHANTOM READ가 발생하지 않도록 lock을 걸어줌
        + PHANTOM READ
            + A는 5000원을 가지고 있음 // A = 5000;
            + 사건a...B가 A에게 3000원 전달, 이때 아직 UPDATE안된 상태
                // A = 5000;
            + 사건b...C가 A에게 2000원 전달, UPDATE (데이터 오염 발생)
                // A = 5000 + 2000;
            + SELECT A_MONEY; // A = 7000;
        + 해당 오염을 막기 위해서는 사건a가 완료될때까지 다른 명령은 접근
            할 수 없도록 lock을 걸어주어야함