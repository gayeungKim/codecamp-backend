테스트 종류
- unit test: 단위 테스트, 버튼클릭과 같은 개별 기능, 응용 프로그램에서
함수와 같이 가장 작은 단위를 테스트
- integration test: 통합 테스트, 여러 기능을 한꺼번에 테스트, 유닛을 모아서
함께 테스트. 즉, 서버의 구성요소들이 함께 잘 작동하는지를 테스트
- E2E test: end to end test, 접속해서 로그인하는 등 시나리오가 있는 테스트,
사용자의 입장에서 프로그램의 시작과 끝을 가정하여 올바르게 작동하는지
테스트하는 것. 따라서 예상되는 사용자의 행동과, 여러 시나리오들을 만들어
시뮬레이션 함. (e2e test 지원 프론트 도구: Cypress, Selenium)

Jest: 테스트 전용 프레임워크

TTD: Test Driven Development, 테스트 주도 개발
- 반복 테스트를 이용한 소프트웨어 방법론으로 작은 단위의 테스트 케이스를
작성하고, 이를 통과하는 코드를 추가하는 단계를 반복하여 구현
- 애자일 방법론 중 하나인 eXtream Programming(XP)의 'Test-First' 개념에
기반을 둔 단순한 설계를 중요시
    - eXtream Programming(XP)란 미래에 대한 예측을 최대한 하지 않고
    지속적으로 프로토타입을 완성하는 애자일 기방법론 중 하나

전체적인 Jest 파일 구조

beforeEach { // Testing 이전에 실행될 부분 (사전작업)
    
    descripbe { // 여러개의 테스트를 모아놓은 그룹 단위

        test(it) { // 하나의 테스트 단위

        }

        test(it) {

        }

    }

}

Mocking
- 단위 테스트를 작성할 때 해당 코드가 의존하는 부분을 가짜(mock)로 대체
- 일반적으로 테스트하려는 코드가 의존하는 부분을 직접 작성하기에
부담스러운 경우 사용
- 실제 객체인 척 하는 가짜 객체를 생성하는 매커니즘 제공
- mocking을 이용하면 구체적으로 구현해야 하는 실제 객체 사용보다 빠르고,
동일한 결과를 내는 테스트를 작성 가능