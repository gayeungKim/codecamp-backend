# MySQL에 저장된 데이터를 뽑아서 elasticsearch 저장하는 내용을 작성
# volumes을 이용해 logstash.conf를 logstash의 docker 안으로 넣음
# 구성
# Input: 모든 형태, 크기, 소스의 데이터 수집. 형태가 자유로워 대부분의 데이터를 가져오올 수 있음
# Filter(생략가능): 데이터 이동 과정에서의 중간 처리(구문 분석 및 변환 처리)
# Output: 데이터를 특정 대상으로 보냄

# JDBC Input Plugin : Input Plugin의 종류.

# Mysql에 대한 설정
input{
	# ##### 1단계 ##### => 매번 똑같은 데이터를 계속 가지고 옴
    # # Mysql-Connector-java-8.0.28.jar 파일의 경로
    #  jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
    # # DB 클래스 명
    #  jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    # # 연결할 DB 정보
    #  jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker03"
    # # DB에 대한 username
    #  jdbc_user => "root"
    # # DB에 대한 password
    #  jdbc_password => "root"
    # # SQL Query 실행하는 주기. cron expresstions로 설정
    # # 분 / 시간 / 일 / 월 / 요일
    # # crontab: 특정 시간에 자동으로 이벤트를 발생 시킴
    #  schedule => "* * * * *"
    # # 명령어 작성(SQL문 사용)
    #  statement => "select * from product"

    #### 2단계 ##### => 시간 문자열이 잘림
    # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
    # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    # jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker03"
    # jdbc_user => "root"
    # jdbc_password => "root"
    # schedule => "* * * * *"
    # # 컬럼에 있는 값을 사용하겠다
    # use_column_value => true
    # # 추적할 컬럼
    # tracking_column => "updatedat"
    # # 추적할 컬럼의 타입
    # tracking_column_type => "timestamp"
    # # 기록 남기기(가장 마지막 값만)
    # last_run_metadata_path => "./aaa.txt"
    #                                                                             # : 변수라는 의미
    # statement => "select id, name, price, updatedat from product where updatedat > :sql_last_value order by updatedat asc"

    #### 3단계 ##### => 
    jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
    jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker03"
    jdbc_user => "root"
    jdbc_password => "root"
    schedule => "* * * * *"
    use_column_value => true
    tracking_column => "updatedat"
    tracking_column_type => "numeric"
    last_run_metadata_path => "./aaa.txt"
                                                                                # : 변수라는 의미
    statement => "select id, name, price, unix_timestamp(updatedat) as updatedat from product where unix_timestamp(updatedat) > :sql_last_value order by updatedat asc"

    # numeric
    # unix_timestamp : 날짜 형식의 데이터를 숫자 형태로 변경

}

output{
    elasticsearch {
        host => "elasticsearch:9200"
        # index => "myproduct03"
        index => "myproduct03_new"
    }
}