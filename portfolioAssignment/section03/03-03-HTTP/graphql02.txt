// =====================================================================
// graphql-API 문제
// =====================================================================
// http://backendclass.codebootcamp.co.kr/graphql 에서 제공하는 API를 사용하세요.
// =====================================================================

1) createBoard를 활용해, 게시물을 하나 등록해 주세요.
mutation{
  createBoard(
    createBoardInput: {
      writer: "포뇨",
      password: "1234",
      title: "라면존맛",
      contents: "햄라면존맛",
      youtubeUrl: "aaaa.com"
    }
  ) {
    _id,
    writer,
    title,
    contents,
    youtubeUrl,
    likeCount,
    dislikeCount,
    createdAt
  }
}

2) 등록한 게시글의 제목과 내용은 무엇인가요?
query{
  fetchBoard(
    boardId: "6432555e7d035600293d9ae9"
  ) {
    title,
    contents
  }
}

3) 등록한 게시글에 좋아요를 1 올려주세요.
mutation{
  likeBoard(
    boardId:"6432555e7d035600293d9ae9"
  )
}

4) 등록한 게시글에 싫어요도 1 올려주세요.
mutation{
  dislikeBoard(
    boardId:"6432555e7d035600293d9ae9"
  )
}

5) 등록한 게시글의 좋아요와 싫어요는 각각 몇 개 인가요? 
	(fetchBoard를 활용해서 확인해 보세요.)
query{
  fetchBoard(
    boardId: "6432555e7d035600293d9ae9"
  ) {
    likeCount,
    dislikeCount
  }
}
6) 현재 등록된 게시글의 총 갯수는 몇 개 인가요? 
	(어떤 API를 활용하면 좋을지 찾아보세요!)
query{
  fetchBoardsCount
}

7) 등록한 게시글의 제목을 수정해 보세요!
mutation{
  updateBoard(
    updateBoardInput: {
      title: "라면라면"
    }
    password: "1234",
  	boardId: "6432555e7d035600293d9ae9"
  ) {
    _id,
    writer,
    title,
    contents,
    createdAt,
    updatedAt
  }
}

8) fetchBoards 전체 게시물 조회를 활용하여 방금 쓴 게시물을 검색해 보세요.
	(search 변수를 활용해요!)
query{
  fetchBoards(
    search: "라면"
  ) {
    writer,
    title,
    contents,
    youtubeUrl,
    likeCount,
    dislikeCount,
    createdAt,
    updatedAt
  }
}

9) 등록한 게시글에 댓글을 3개 추가해 보세요.
mutation{
  createBoardComment(
    createBoardCommentInput: {
      writer: "짱구",
      password: "0000",
      contents: "맛있겠다아앙",
      rating: 4.5
    }
    boardId:"6432555e7d035600293d9ae9"
  ) {
    _id,
    writer,
    contents,
    rating,
    createdAt,
  }
}

10) 첫번째 댓글의 내용을 수정해 보세요!
mutation{
  updateBoardComment(
    updateBoardCommentInput: {
      contents: "우와아아앙",
      rating: 3.0
    },
    password: "0002",
    boardCommentId:"643258247d035600293d9aec"
  ) {
    _id,
    writer,
    contents,
    rating,
    createdAt,
    updatedAt
  }
}

11) 두번째 댓글을 삭제해 보세요!
mutation{
  deleteBoardComment(
    boardCommentId:"643258247d035600293d9aec",
    password: "0002"
  )
}

12) 등록한 게시글에 달려있는 모든 댓글을 조회해 보세요.(작성자와 내용만 조회합니다.)
query{
  fetchBoardComments(
    boardId:"6432555e7d035600293d9ae9"
  ), {
    writer,
    contents
  }
}

13) BEST 게시글을 조회해 보세요! (API 이름을 잘 찾아보세요!)
query{
  fetchBoardsOfTheBest
  {
    writer,
    contents,
    likeCount,
    createdAt
  }
}

14) 회원가입을 해보세요! 사용자, 즉 User를 만드는 API입니다!
# Write your query or mutation here
mutation{
  createUser(
    createUserInput: {
      email: "aabbcc@abc.com",
      password: "abc",
      name: "abc"
    }
  ) {
    _id,
    email,
    name,
    picture,
    createdAt,
    updatedAt,
    deletedAt,
    
  }
}

{
  "data": {
    "createUser": {
      "_id": "64324f5b7d035600293d9ae6",
      "email": "aabbcc@abc.com",
      "name": "abc",
      "picture": null,
      "createdAt": "2023-04-09T05:38:35.566Z",
      "updatedAt": "2023-04-09T05:38:35.566Z",
      "deletedAt": null
    }
  }
}