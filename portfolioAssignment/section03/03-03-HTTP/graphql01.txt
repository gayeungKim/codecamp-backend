// ======================================================================
// graphql-API 문제
// ======================================================================
// https://practice.codebootcamp.co.kr/graphql 에서 제공하는 API를 사용하세요.
// ======================================================================

1) 철수의 나이는 몇살인가요?(나이만 조회해 주세요.)
query{
  fetchProfile(
    name: "철수"
  ) {
    age
  }
}

2) 영희의 학교는 어디인가요?(학교만 조회해 주세요.)
query{
  fetchProfile(
    name: "영희"
  ) {
    school
  }
}
3) 3번 게시글의 내용과 작성일이 무엇인가요?(내용과 작성일만 조회해 주세요.)
query{
  fetchBoard(
    number: 3
  ) {
    contents,
    createAt
  }
}
4) 본인의 이름으로 프로필을 작성해 보세요.
mutation{
  createProfile(
    name: "짱구",
    age: 5,
    school: "떡잎유치원"
  ) {
    _id,
    message
  }
}
5) 본인의 이름으로 게시글을 작성해 보세요.
mutation{
  createBoard(
    writer: "짱구",
    title: "울라울라",
    contents: "부리부리"
  ) {
    _id,
    number,
    message
  }
}
6) 자신의 프로필을 조회해 보세요.
query{
  fetchProfile(
    name: "짱구"
  ) {
    number,
    name,
    age,
    school
  }
}
7) 자신의 게시글을 조회해 보세요.
query{
  fetchBoard(
    number: 274887
  ) {
    writer,
    title,
    contents,
    createdAt
  }
}
8) 본인의 프로필에서, 학교를 자신이 졸업한 초등학교로 바꿔보세요.
mutation{
  updateProfile(
    name: "짱구",
    age: 5,
    school: "팡팡유치원"
  ) {
    _id,
    number,
    message
  }
}

9) 본인의 게시글에서, 제목과 내용을 바꿔보세요.
// 수정이 필요 없는 것은 굳이 입려할 필요 x
// 작성자는 수정할 필요 x
mutation{
  updateBoard(
    number:274887,
    title: "타이틀 수정",
    contents: "내용 수정"
  ) {
    _id,
    number,
    message
  }
}

10) 자신이 좋아하는 만화 주인공으로 프로필을 작성해 보세요.
mutation{
  createProfile(
    name: "포뇨",
    age: 99,
    school: "바다"
  ) {
    _id,
    number,
    message
  }
}

11) 위 10번에서 작성한 프로필을 삭제해 보세요.
mutation{
  deleteProfile(
    name: "포뇨"
  ) {
    _id,
    number,
    message
  }
}

12) 상품을 하나 만들어 보세요.
mutation{
  createProduct(
    seller: "짱구",
    createProductInput: {
      name: "초코비",
      detail: "초코맛",
      price: 2000
    }
  ) {
    _id,
    number,
    message
  }
}
// id: acf061bf-9d31-4f6a-adac-5d1d7a8e0d41

13) 위 12번에서 만들었던 상품의 가격을 500원 인상해 보세요.
mutation{
  updateProduct(
    productId: "acf061bf-9d31-4f6a-adac-5d1d7a8e0d41",
    updateProductInput: {
      price:2500
    }) {
      _id,
      number,
      message
    }
}

14) 위에서 만든 상품을 조회하되, 가격만 조회해 보세요.
query{
  fetchProduct(
    productId: "acf061bf-9d31-4f6a-adac-5d1d7a8e0d41",
  ) {
    price
  }
}

15) 조회했던 상품을 삭제해 보세요.
mutation{
  deleteProduct(
    productId: "acf061bf-9d31-4f6a-adac-5d1d7a8e0d41")
  	{
      _id,
      number,
      message
    }
}

16) 삭제한 상품이 정말로 삭제되었는지 다시 한번 조회해 보세요.
query{
  fetchProduct(
    productId: "acf061bf-9d31-4f6a-adac-5d1d7a8e0d41",
  ) {
    name,
    price
  }
}

17) 게시물 목록 중, 2페이지를 조회해 보세요.
query{
  fetchBoards(
    page: 2
  ) {
    writer,
    title,
    contents,
    createdAt,
    number
  }
}

18) 게시물 목록을 조회할 때, page를 입력하지 않으면, 어떤 결과가 발생하는지 확인해 보세요.
		(Hint : syntax error는 아닙니다.)
최근 등록한 순으로 10개(조회 default 개수)가 조회됨

19) 프로필이 전체 몇 개가 있는지 확인해 보세요.
query{
  fetchProfilesCount
}
560개
20) 게시물은 몇 개가 있는지 조회해보세요.
query{
  fetchBoardsCount
}
266753 개